// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.6.1.0
//      SpecFlow Generator Version:1.6.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Bennington.AdminAccounts.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.6.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Admin Accounts")]
    public partial class AdminAccountsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AdminAccounts.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Admin Accounts", "In order to manage administrator accounts\r\nAs an administrator\r\nI want to be add," +
                    " edit, delete admin accounts using a nice interface", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin visits the admin account list page")]
        public virtual void AdminVisitsTheAdminAccountListPage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin visits the admin account list page", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName"});
            table1.AddRow(new string[] {
                        "20C492E8-B610-43F8-B97A-BDD50C9C864E",
                        "John",
                        "Galt"});
#line 7
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table1);
#line 10
 testRunner.When("the administrator visits the Admin Account list page");
#line 11
 testRunner.Then("he should see the Admin Account list page");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "FirstName",
                        "LastName",
                        "Id"});
            table2.AddRow(new string[] {
                        "John",
                        "Galt",
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e"});
#line 12
 testRunner.And("he should see the following accounts on the list page", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin goes to the edit page for an admin account")]
        public virtual void AdminGoesToTheEditPageForAnAdminAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin goes to the edit page for an admin account", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username"});
            table3.AddRow(new string[] {
                        "1567DDA0-8FC1-45C5-B0D3-F9396DD9BDB8",
                        "Howard",
                        "Roark",
                        "hroark"});
#line 17
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table3);
#line 20
 testRunner.When("the administrator visits the Admin Account edit page for \'1567DDA0-8FC1-45C5-B0D3" +
                    "-F9396DD9BDB8\'");
#line 21
 testRunner.Then("he should see the Admin Account edit page");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Id",
                        "1567dda0-8fc1-45c5-b0d3-f9396dd9bdb8"});
            table4.AddRow(new string[] {
                        "FirstName",
                        "Howard"});
            table4.AddRow(new string[] {
                        "LastName",
                        "Roark"});
            table4.AddRow(new string[] {
                        "Username",
                        "hroark"});
            table4.AddRow(new string[] {
                        "Password",
                        ""});
#line 22
 testRunner.And("he should see an admin account edit form with the following values", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin goes to the create page for an admin account")]
        public virtual void AdminGoesToTheCreatePageForAnAdminAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin goes to the create page for an admin account", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.When("the administrator visits the Admin Account edit page for \'\'");
#line 32
 testRunner.Then("he should see the Admin Account edit page");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "FirstName",
                        ""});
            table5.AddRow(new string[] {
                        "LastName",
                        ""});
            table5.AddRow(new string[] {
                        "Username",
                        ""});
            table5.AddRow(new string[] {
                        "Password",
                        ""});
#line 33
 testRunner.And("he should see an admin account edit form with the following values", ((string)(null)), table5);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin edits an admin account")]
        public virtual void AdminEditsAnAdminAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin edits an admin account", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username"});
            table6.AddRow(new string[] {
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e",
                        "E",
                        "W",
                        "sdf"});
#line 41
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Id",
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e"});
            table7.AddRow(new string[] {
                        "FirstName",
                        "Ellis"});
            table7.AddRow(new string[] {
                        "LastName",
                        "Wyatt"});
            table7.AddRow(new string[] {
                        "Username",
                        "wyattoil"});
            table7.AddRow(new string[] {
                        "Password",
                        "elliswyattoil"});
#line 44
 testRunner.When("the administrator submits the following Admin Account edit page", ((string)(null)), table7);
#line 51
 testRunner.Then("he should see the Admin Account edit page");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username",
                        "Password"});
            table8.AddRow(new string[] {
                        "20C492E8-B610-43F8-B97A-BDD50C9C864E",
                        "Ellis",
                        "Wyatt",
                        "wyattoil",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM0="});
#line 52
 testRunner.And("the following admin accounts should exist in the database", ((string)(null)), table8);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin creates an admin account")]
        public virtual void AdminCreatesAnAdminAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin creates an admin account", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username"});
#line 57
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Id",
                        "73977dae-10fa-4311-95b1-9b3ecca0023d"});
            table10.AddRow(new string[] {
                        "FirstName",
                        "Ellis"});
            table10.AddRow(new string[] {
                        "LastName",
                        "Wyatt"});
            table10.AddRow(new string[] {
                        "Username",
                        "wyattoil"});
            table10.AddRow(new string[] {
                        "Password",
                        "elliswyattoil"});
#line 59
 testRunner.When("the administrator submits the following Admin Account edit page", ((string)(null)), table10);
#line 66
 testRunner.Then("he should see the Admin Account edit page");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username",
                        "Password"});
            table11.AddRow(new string[] {
                        "73977DAE-10FA-4311-95B1-9B3ECCA0023D",
                        "Ellis",
                        "Wyatt",
                        "wyattoil",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM0="});
#line 67
 testRunner.And("the following admin accounts should exist in the database", ((string)(null)), table11);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admin does not set a password when saving it")]
        public virtual void AdminDoesNotSetAPasswordWhenSavingIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admin does not set a password when saving it", ((string[])(null)));
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username",
                        "Password"});
            table12.AddRow(new string[] {
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e",
                        "E",
                        "W",
                        "sdf",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM0="});
#line 72
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table12);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Id",
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e"});
            table13.AddRow(new string[] {
                        "FirstName",
                        "Ellis"});
            table13.AddRow(new string[] {
                        "LastName",
                        "Wyatt"});
            table13.AddRow(new string[] {
                        "Username",
                        "wyattoil"});
            table13.AddRow(new string[] {
                        "Password",
                        ""});
#line 75
 testRunner.When("the administrator submits the following Admin Account edit page", ((string)(null)), table13);
#line 82
 testRunner.Then("he should see the Admin Account edit page");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username",
                        "Password"});
            table14.AddRow(new string[] {
                        "20C492E8-B610-43F8-B97A-BDD50C9C864E",
                        "Ellis",
                        "Wyatt",
                        "wyattoil",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM0="});
#line 83
 testRunner.And("the following admin accounts should exist in the database", ((string)(null)), table14);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Delete an account")]
        public virtual void DeleteAnAccount()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete an account", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "FirstName",
                        "LastName",
                        "Username",
                        "Password"});
            table15.AddRow(new string[] {
                        "20c492e8-b610-43f8-b97a-bdd50c9c864e",
                        "A",
                        "D",
                        "usera",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM0="});
            table15.AddRow(new string[] {
                        "A8886A73-90FC-4675-A943-59A1A73CF19B",
                        "B",
                        "E",
                        "userb",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM1="});
            table15.AddRow(new string[] {
                        "2F44420B-4D33-405E-9599-54D4FFFE9F0A",
                        "C",
                        "F",
                        "userc",
                        "upsrXq/NBgWdbsiDjl9dto6Dtu1Oba3wjYghQjOrGM2="});
#line 88
 testRunner.Given("the following admin accounts exist in the database", ((string)(null)), table15);
#line 93
 testRunner.When("the administrator deletes the admin account \'20c492e8-b610-43f8-b97a-bdd50c9c864e" +
                    "\'");
#line 94
 testRunner.Then("he should be sent to the admin account list page");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
