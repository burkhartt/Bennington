#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Paragon.ContentTree.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Paragon")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTreeNode(TreeNode instance);
    partial void UpdateTreeNode(TreeNode instance);
    partial void DeleteTreeNode(TreeNode instance);
    #endregion
		
		public DataModelDataContext() :
		base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Paragon.ContentTree"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TreeNode> TreeNodes
		{
			get
			{
				return this.GetTable<TreeNode>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TreeNode")]
	public partial class TreeNode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _CreateBy;
		
		private System.Nullable<System.DateTime> _LastModifyDate;
		
		private string _LastModifyBy;
		
		private string _ParentTreeNodeId;
		
		private string _Type;
		
		private EntitySet<TreeNode> _TreeNodes;
		
		private EntityRef<TreeNode> _TreeNode1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnCreateByChanging(string value);
    partial void OnCreateByChanged();
    partial void OnLastModifyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifyDateChanged();
    partial void OnLastModifyByChanging(string value);
    partial void OnLastModifyByChanged();
    partial void OnParentTreeNodeIdChanging(string value);
    partial void OnParentTreeNodeIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public TreeNode()
		{
			this._TreeNodes = new EntitySet<TreeNode>(new Action<TreeNode>(this.attach_TreeNodes), new Action<TreeNode>(this.detach_TreeNodes));
			this._TreeNode1 = default(EntityRef<TreeNode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="NVarChar(100)")]
		public string CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifyDate
		{
			get
			{
				return this._LastModifyDate;
			}
			set
			{
				if ((this._LastModifyDate != value))
				{
					this.OnLastModifyDateChanging(value);
					this.SendPropertyChanging();
					this._LastModifyDate = value;
					this.SendPropertyChanged("LastModifyDate");
					this.OnLastModifyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifyBy", DbType="NVarChar(100)")]
		public string LastModifyBy
		{
			get
			{
				return this._LastModifyBy;
			}
			set
			{
				if ((this._LastModifyBy != value))
				{
					this.OnLastModifyByChanging(value);
					this.SendPropertyChanging();
					this._LastModifyBy = value;
					this.SendPropertyChanged("LastModifyBy");
					this.OnLastModifyByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentTreeNodeId", DbType="NVarChar(100)")]
		public string ParentTreeNodeId
		{
			get
			{
				return this._ParentTreeNodeId;
			}
			set
			{
				if ((this._ParentTreeNodeId != value))
				{
					if (this._TreeNode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTreeNodeIdChanging(value);
					this.SendPropertyChanging();
					this._ParentTreeNodeId = value;
					this.SendPropertyChanged("ParentTreeNodeId");
					this.OnParentTreeNodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(1000)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TreeNode_TreeNode", Storage="_TreeNodes", ThisKey="Id", OtherKey="ParentTreeNodeId")]
		public EntitySet<TreeNode> TreeNodes
		{
			get
			{
				return this._TreeNodes;
			}
			set
			{
				this._TreeNodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TreeNode_TreeNode", Storage="_TreeNode1", ThisKey="ParentTreeNodeId", OtherKey="Id", IsForeignKey=true)]
		public TreeNode TreeNode1
		{
			get
			{
				return this._TreeNode1.Entity;
			}
			set
			{
				TreeNode previousValue = this._TreeNode1.Entity;
				if (((previousValue != value) 
							|| (this._TreeNode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TreeNode1.Entity = null;
						previousValue.TreeNodes.Remove(this);
					}
					this._TreeNode1.Entity = value;
					if ((value != null))
					{
						value.TreeNodes.Add(this);
						this._ParentTreeNodeId = value.Id;
					}
					else
					{
						this._ParentTreeNodeId = default(string);
					}
					this.SendPropertyChanged("TreeNode1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TreeNodes(TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.TreeNode1 = this;
		}
		
		private void detach_TreeNodes(TreeNode entity)
		{
			this.SendPropertyChanging();
			entity.TreeNode1 = null;
		}
	}
}
#pragma warning restore 1591
